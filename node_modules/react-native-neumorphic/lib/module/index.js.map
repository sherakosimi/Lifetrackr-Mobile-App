{"version":3,"sources":["index.tsx"],"names":["NeumorphConfigShapes","calculateColor","baseColor","intensity","String","replace","length","hexIntValue","n","hexString","parseInt","substr","Math","round","min","max","toString","calculateGradientStops","shape","Flat","Pressed","gradientColor1","Convex","gradientColor2","Concave","defaultConfig","distance","blur","caluclateNuemorph","backgroundColor","config","lightShadow","darkShadow","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","top","left","right","bottom","gradientProps","useAngle","angle","colors","angleCenter","x","y","console","log","Neumorph","Component","c","cProps","props","cStyle","style","NewComponent","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ViewStyle, View } from 'react-native';\nimport LinearGradient from 'react-native-linear-gradient';\nimport InsetShadow from 'react-native-inset-shadow';\n\nexport enum NeumorphConfigShapes {\n  'Flat' = 'flat',\n  'Concave' = 'concave',\n  'Convex' = 'convex',\n  'Pressed' = 'pressed',\n}\n\nexport interface NeumorphConfig {\n  distance: number;\n  intensity: number;\n  blur: number;\n  shape: NeumorphConfigShapes;\n}\n\ninterface ShadowStyles {\n  shadowColor: string;\n  shadowOffset: {\n    width: number;\n    height: number;\n  };\n  shadowOpacity: number;\n  shadowRadius: number;\n\n  elevation: number;\n}\n\ninterface InsetShadowProps {\n  shadowColor: string;\n  shadowOffset: number;\n  shadowOpacity: number;\n  shadowRadius: number;\n  elevation: number;\n  top: boolean;\n  left: boolean;\n  bottom: boolean;\n  right: boolean;\n}\n\ntype LinearGradientStops = [string, string];\n\ninterface LinearGradientProps {\n  colors: LinearGradientStops;\n  useAngle: true;\n  angle: number;\n  angleCenter: {\n    x: 0.5;\n    y: 0.5;\n  };\n}\n\nconst calculateColor = (baseColor: string, intensity: number) => {\n  (baseColor = String(baseColor).replace(/[^0-9a-f]/gi, '')).length < 6 &&\n    (baseColor =\n      baseColor[0] +\n      baseColor[0] +\n      baseColor[1] +\n      baseColor[1] +\n      baseColor[2] +\n      baseColor[2]),\n    (intensity = intensity || 0);\n  let hexIntValue: number | string;\n  let n: number;\n  let hexString = '#';\n  for (n = 0; n < 3; n++)\n    (hexIntValue = parseInt(baseColor.substr(2 * n, 2), 16)),\n      (hexString += (\n        '00' +\n        (hexIntValue = Math.round(\n          Math.min(Math.max(0, hexIntValue + hexIntValue * intensity), 255)\n        ).toString(16))\n      ).substr(hexIntValue.length));\n  return hexString;\n};\n\nconst calculateGradientStops = (\n  shape: NeumorphConfigShapes,\n  baseColor: string\n): LinearGradientStops => {\n  if (\n    shape === NeumorphConfigShapes.Flat ||\n    shape === NeumorphConfigShapes.Pressed\n  ) {\n    return [baseColor, baseColor];\n  }\n\n  const gradientColor1 = calculateColor(\n    baseColor,\n    shape === NeumorphConfigShapes.Convex ? 0.07 : -0.1\n  );\n  const gradientColor2 = calculateColor(\n    baseColor,\n    shape === NeumorphConfigShapes.Concave ? 0.07 : -0.1\n  );\n  return [gradientColor1, gradientColor2];\n};\n\nconst defaultConfig: NeumorphConfig = {\n  distance: 50,\n  intensity: 0.15,\n  blur: 60,\n  shape: NeumorphConfigShapes.Flat,\n};\n\nconst caluclateNuemorph = (\n  backgroundColor: string,\n  config: NeumorphConfig = defaultConfig\n) => {\n  let lightShadow: ShadowStyles | InsetShadowProps;\n  let darkShadow: ShadowStyles | InsetShadowProps;\n\n  if (config.shape !== NeumorphConfigShapes.Pressed) {\n    lightShadow = {\n      shadowColor: calculateColor(backgroundColor, config.intensity),\n      shadowOffset: {\n        width: -config.distance,\n        height: -config.distance,\n      },\n      shadowOpacity: 1,\n      shadowRadius: config.blur,\n\n      elevation: 24,\n    } as ShadowStyles;\n    darkShadow = {\n      shadowColor: calculateColor(backgroundColor, -1 * config.intensity),\n      shadowOffset: {\n        width: config.distance,\n        height: config.distance,\n      },\n      shadowOpacity: 1,\n      shadowRadius: config.blur,\n\n      elevation: 24,\n    } as ShadowStyles;\n  } else {\n    lightShadow = {\n      shadowColor: calculateColor(backgroundColor, config.intensity),\n      shadowOffset: config.distance,\n      top: false,\n      left: false,\n      shadowOpacity: 1,\n      shadowRadius: config.blur,\n    } as InsetShadowProps;\n    darkShadow = {\n      shadowColor: calculateColor(backgroundColor, -1 * config.intensity),\n      shadowOffset: -config.distance,\n      right: false,\n      bottom: false,\n      shadowOpacity: 1,\n      shadowRadius: config.blur,\n    } as InsetShadowProps;\n  }\n\n  const gradientProps: LinearGradientProps = {\n    useAngle: true,\n    angle: 145,\n    colors: calculateGradientStops(config.shape, backgroundColor),\n    angleCenter: {\n      x: 0.5,\n      y: 0.5,\n    },\n  };\n\n  console.log('{ lightShadow, darkShadow, gradient }: ', {\n    lightShadow,\n    darkShadow,\n    gradientProps,\n  });\n  return { lightShadow, darkShadow, gradientProps };\n};\n\ninterface IConfigParams {\n  backgroundColor: string;\n  borderRadius: number;\n  height: number;\n  width: number;\n}\n\nconst Neumorph = (Component: any, config?: NeumorphConfig) => {\n  const c = Component({});\n  const cProps = Component({}).props;\n  const cStyle = cProps.style as ViewStyle;\n  const {\n    backgroundColor = '#FFFFFF',\n    height,\n    width,\n  } = cStyle as IConfigParams;\n  const { lightShadow, darkShadow, gradientProps } = caluclateNuemorph(\n    backgroundColor,\n    config\n  );\n  const NewComponent =\n    !config || config.shape !== NeumorphConfigShapes.Pressed ? (\n      <View style={[darkShadow as ShadowStyles, { height, width }]}>\n        <View style={lightShadow as ShadowStyles}>\n          <LinearGradient {...{ style: cStyle, ...gradientProps }}>\n            {c.props.children}\n          </LinearGradient>\n        </View>\n      </View>\n    ) : (\n      <View style={{ height, width }}>\n        <InsetShadow {...lightShadow}>\n          <InsetShadow {...darkShadow}>\n            <LinearGradient {...{ style: cStyle, ...gradientProps }}>\n              {c.props.children}\n            </LinearGradient>\n          </InsetShadow>\n        </InsetShadow>\n      </View>\n    );\n\n  return () => NewComponent;\n};\n\nexport default Neumorph;\n"]}